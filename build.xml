<?xml version="1.0" encoding="UTF-8"?>
<!-- file build.xml in your project root directory -->
<project name="project" default="build" basedir=".">

    <property name="main.dir" value="${basedir}" />

    <target name="properties" if="eclipse.running">
	  <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

    <target name="init" depends="properties">
    	<property name="rapla.dir" value="../Rapla"/>
    	<property name="raplalib.dir" value="${rapla.dir}/lib"/>
	    <property name="rapla.path" value="${rapla.dir}/build/rapla.jar" />

    	<basename property="project.name" file="${main.dir}"/>
	    <property name="main.lib" value="${project.name}.jar"/>
	    <property name="buildjar.path" value="${main.dir}/build/${main.lib}" />

	    <!-- All the libraries are used for compilation by default-->
	    <patternset id="default-compile-libraries" >
	       <include name="client/*.jar"/>
	       <include name="common/*.jar"/>
	       <include name="server/*.jar"/>
	    </patternset>

	    <!-- Information about the compiler -->
	    <!-- property name="build.compiler" value="javac1.3"/-->
	    <property name="debug"          value="on"/>
	    <property name="optimize"       value="off"/>
	    <property name="deprecation"    value="on"/>
        <property name="target_vm"         value="1.6"/>
	    <property name="verbose"        value="no"/>
	    <property name="packages"       value="org.*"/>

	    <!-- The rapla-directories -->
	    <property name="src.dir" value="${main.dir}/src" />
	    <property name="build.dir" value="${main.dir}/build" />
	    <property name="generated.dir" value="${build.dir}/generated-src"/>
	    <property name="build.dest" value="${build.dir}/classes" />
    </target>

    <!-- edit the following lines to your needs            -->
	<target name="prepare" depends="init">
	    <mkdir dir="${generated.dir}" />
	    <mkdir dir="${build.dir}" />
	    <mkdir dir="${build.dest}" />
	    <mkdir dir="${build.dest}/META-INF" />
   </target>

  <target name="compile" depends="prepare">
     <echo message="Make sure the file ${rapla.path} exists. Otherwise build one first."/>
    <!-- Compile the java code from ${src} into ${build.dir} -->
    <javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
	 	   source="${target_vm}"
	 	   target="${target_vm}"
           optimize="${optimize}"
           deprecation="${deprecation}"
	       verbose="${verbose}">
        <classpath>
          <fileset dir="${raplalib.dir}">
            <patternset refid="default-compile-libraries" />
          </fileset>
          <pathelement path="${rapla.path}"/>
        </classpath>
    </javac>

    <!-- The png,license,xsl and rng files must be in the correct classpath  -->
    <copy todir="${build.dest}">
        <fileset dir="${src.dir}">
          <exclude name="**/*.java"/>
          <exclude name="**/*Resources.xml"/>
          <exclude name="**/package.html"/>
        </fileset>
    </copy>

  </target>

  <!-- Set a variable if plugin meta is already up-to-date.                  -->
  <target name="pluginmeta-check" depends="prepare">
    <condition property="pluginmeta.notrequired">
      <and>
        <uptodate>
         <srcfiles dir="${build.dest}" includes="**/*Plugin.class"/>
         <mapper type="merge" to="${build.dest}/META-INF/rapla-plugin.list"/>
        </uptodate>
      </and>
    </condition>
  </target>

  <target name="generate-plugin-meta" unless="pluginmeta.notrequired"
          description="Generate the rapla-plugin.list"
          depends="pluginmeta-check,compile">
	<echo message="generating Plugin Metainfo"/>
    <mkdir dir="${generated.dir}/META-INF"/>
    <java classname="org.rapla.framework.ServiceListCreator" failonerror="true" fork="yes">
      <arg value="${build.dest}"/>
      <arg value="${generated.dir}/META-INF/rapla-plugin.list"/>
      <classpath>
        <pathelement path="${rapla.path}"/>
        <pathelement path="${build.dest}"/>
        <fileset dir="${raplalib.dir}">
           <patternset refid="default-compile-libraries" />
        </fileset>
      </classpath>
    </java>
    <copy file="${generated.dir}/META-INF/rapla-plugin.list" tofile="${build.dest}/META-INF/rapla-plugin.list"/>
  </target>

  <!-- Set a variable if resources are already up-to-date.                  -->
  <target name="resources-check" depends="init">
    <condition property="resources.notrequired">
      <and>
        <uptodate>
         <srcfiles dir="${src.dir}">
		   <include name="**/*Resources.xml"/>
		  </srcfiles>
		  <mapper type="glob" from="*Resources.xml" to="${build.dest}/*Resources.class"/>
        </uptodate>
        <uptodate property="test"
          srcfile="${main.dir}/${doc.properties}"
          targetfile="${build.dest}/org/rapla/RaplaResources.class"
        />
      </and>
    </condition>
  </target>

  <target name="compile-resources" unless="resources.notrequired"
          description="Generate and compile the RaplaResources"
          depends="resources-check,compile">

    <echo message="generating Resourcefiles"/>

    <java classname="org.rapla.components.xmlbundle.impl.TranslationParser" failonerror="true" fork="yes">
      <arg value="${src.dir}"/>
      <arg value="${generated.dir}"/>
      <classpath>
        <pathelement path="${rapla.path}"/>
        <fileset dir="${raplalib.dir}">
           <patternset refid="default-compile-libraries" />
        </fileset>
      </classpath>
    </java>

    <javac srcdir="${generated.dir}"
	 	   source="${target_vm}"
           target="${target_vm}"
           destdir="${build.dest}"
           verbose="${verbose}">
      <include name="**/*.java" />
    </javac>
  </target>

  <target name="build" depends="compile,compile-resources,generate-plugin-meta">
    <jar jarfile="${build.dir}/${main.lib}">
         <fileset dir="${build.dest}">
         </fileset>
         <manifest>
           <attribute name="Created-By" value="${user.name}"/>
           <section name="common">
  	           <attribute name="Implementation-Title" value="common"/>
    	       <attribute name="Implementation-Version" value="${TODAY}"/>
  	       </section>
         </manifest>
    </jar>
  </target>

</project>
<!-- end file build.xml -->
